@page "/dm"
@using SWLOR.Game.Server.Enumeration

<h3>DMs (@_totalRecords)</h3>

<div class="row mb-3">
    <div class="col">
        <input type="text"
               @bind="@_searchText"
               class="form-control"
               placeholder="Search by name..."
               @onblur="RefreshList" />
    </div>
    <div class="col-1">
        <button @onclick="RefreshList"
                class="btn btn-primary">
            Search
        </button>
    </div>
    <div class="col-auto">
        <button @onclick="ShowAddModal"
                class="btn btn-success">
            <i class="fas fa-plus"></i> Add DM
        </button>
    </div>
</div>

<table class="table">
	<thead>
		<tr>
			<th>Name</th>
			<th>CD Key</th>
			<th>Type</th>
			<th>Date Created</th>
			<th>Actions</th>
		</tr>
	</thead>
	<tbody>
		@foreach (var dm in _dms)
		{
			<tr>
				<td>@dm.Name</td>
				<td>@dm.CDKey</td>
				<td>@dm.Authorization.ToString()</td>
				<td>@dm.DateCreated.ToString("MMM dd, yyyy HH:mm")</td>
				<td>
					<button @onclick="() => ShowEditModal(dm)" class="btn btn-sm btn-warning me-1">
						<i class="fas fa-edit"></i> Edit
					</button>
					<button @onclick="() => ShowDeleteModal(dm)" class="btn btn-sm btn-danger">
						<i class="fas fa-trash"></i> Delete
					</button>
				</td>
			</tr>
		}
	</tbody>
</table>

<!-- Add/Edit Modal -->
@if (_showModal)
{
	<div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">@(_editingDM == null ? "Add New DM" : "Edit DM")</h5>
					<button type="button" class="btn-close" @onclick="HideModal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<div class="mb-3">
						<label for="dmName" class="form-label">Name</label>
						<input type="text" id="dmName" class="form-control" @bind="_modalName" />
					</div>
					<div class="mb-3">
						<label for="dmCDKey" class="form-label">CD Key</label>
						<input type="text" 
							   id="dmCDKey" 
							   class="form-control" 
							   @bind="_modalCDKey" 
							   maxlength="8" 
							   pattern="[A-Za-z0-9]{8}"
							   title="CD Key must be exactly 8 alphanumeric characters"
							   placeholder="8 characters (A-Z, a-z, 0-9)" />
						<small class="form-text text-muted">Must be exactly 8 alphanumeric characters</small>
					</div>
					<div class="mb-3">
						<label for="dmAuthorization" class="form-label">Authorization Level</label>
						<select id="dmAuthorization" class="form-select" @bind="_modalAuthorization">
							<option value="@AuthorizationLevel.DM">DM</option>
							<option value="@AuthorizationLevel.Admin">Admin</option>
						</select>
					</div>
					@if (!string.IsNullOrEmpty(_validationError))
					{
						<div class="alert alert-danger">
							@_validationError
						</div>
					}
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="HideModal">Cancel</button>
					<button type="button" class="btn btn-primary" @onclick="SaveDM">Save</button>
				</div>
			</div>
		</div>
	</div>
}

<!-- Delete Confirmation Modal -->
@if (_showDeleteModal)
{
	<div class="modal fade show" style="display: block; background-color: rgba(0,0,0,0.5);" tabindex="-1" role="dialog">
		<div class="modal-dialog" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Confirm Delete</h5>
					<button type="button" class="btn-close" @onclick="HideDeleteModal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<p>Are you sure you want to delete DM "@_deletingDM?.Name"?</p>
					<p class="text-danger">This action cannot be undone.</p>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="HideDeleteModal">Cancel</button>
					<button type="button" class="btn btn-danger" @onclick="ConfirmDelete">Delete</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	protected string _searchText = "";
	private List<AuthorizedDM> _dms = new();
	protected long _totalRecords;

	// Modal state
	private bool _showModal = false;
	private bool _showDeleteModal = false;
	private AuthorizedDM? _editingDM;
	private AuthorizedDM? _deletingDM;
	private string _modalName = "";
	private string _modalCDKey = "";
	private AuthorizationLevel _modalAuthorization = AuthorizationLevel.DM;
	private string _validationError = "";

	protected override async Task OnInitializedAsync()
	{
		RefreshList();
	}

	protected void RefreshList()
	{
		var query = new DBQuery<AuthorizedDM>();
		_totalRecords = DB.SearchCount(query);

		if (!string.IsNullOrWhiteSpace(_searchText))
		{
		    query.AddFieldSearch(nameof(AuthorizedDM.Name), _searchText, true);
		}

	    _dms = DB.Search(query).ToList();
	}

	private void ShowAddModal()
	{
		_editingDM = null;
		_modalName = "";
		_modalCDKey = "";
		_modalAuthorization = AuthorizationLevel.DM;
		_validationError = "";
		_showModal = true;
	}

	private void ShowEditModal(AuthorizedDM dm)
	{
		_editingDM = dm;
		_modalName = dm.Name;
		_modalCDKey = dm.CDKey;
		_modalAuthorization = dm.Authorization;
		_validationError = "";
		_showModal = true;
	}

	private void ShowDeleteModal(AuthorizedDM dm)
	{
		_deletingDM = dm;
		_showDeleteModal = true;
	}

	private void HideModal()
	{
		_showModal = false;
		_editingDM = null;
		_validationError = "";
	}

	private void HideDeleteModal()
	{
		_showDeleteModal = false;
		_deletingDM = null;
	}

	private void SaveDM()
	{
		if (string.IsNullOrWhiteSpace(_modalName) || string.IsNullOrWhiteSpace(_modalCDKey))
		{
			// Show validation error
			_validationError = "Name and CD Key are required.";
			return;
		}

		// Validate CD Key format
		var trimmedCDKey = _modalCDKey.Trim();
		if (trimmedCDKey.Length != 8)
		{
			_validationError = "CD Key must be exactly 8 characters long.";
			return;
		}

		if (!System.Text.RegularExpressions.Regex.IsMatch(trimmedCDKey, "^[A-Za-z0-9]+$"))
		{
			_validationError = "CD Key must contain only alphanumeric characters (A-Z, a-z, 0-9).";
			return;
		}

		// Check if CD Key already exists (for new DMs)
		if (_editingDM == null)
		{
			var existingDM = DB.Get<AuthorizedDM>(trimmedCDKey);
			if (existingDM != null)
			{
				_validationError = "A DM with this CD Key already exists.";
				return;
			}
		}

		_validationError = "";

		if (_editingDM == null)
		{
			// Create new DM
			var newDM = new AuthorizedDM
			{
				Name = _modalName.Trim(),
				CDKey = trimmedCDKey,
				Authorization = _modalAuthorization
			};
			DB.Set(newDM);
		}
		else
		{
			// Update existing DM
			_editingDM.Name = _modalName.Trim();
			_editingDM.CDKey = trimmedCDKey;
			_editingDM.Authorization = _modalAuthorization;
			DB.Set(_editingDM);
		}

		HideModal();
		RefreshList();
	}

	private void ConfirmDelete()
	{
		if (_deletingDM != null)
		{
			DB.Delete<AuthorizedDM>(_deletingDM.Id);
			HideDeleteModal();
			RefreshList();
		}
	}
}
