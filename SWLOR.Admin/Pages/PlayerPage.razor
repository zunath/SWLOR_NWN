@page "/player"
@attribute [Authorize(Policy = "DiscordAdmin")]
@inject NavigationManager NavManager
@using System.Reflection

<h3>Players (@_totalRecords)</h3>

<div class="row">
	
	<div class="col">
		<input 
			type="text" 
			@bind="@_searchText" 
			class="form-control"
			@onblur="RefreshList"/>
	</div>
	<div class="col-1">
		<button 
			@onclick="RefreshList"
			class="btn btn-primary">Search
			</button>
	</div>

</div>

<table class="table">
	<thead>
	<tr>
		<th>Name</th>
		<th>Type</th>
		<th>Date Created</th>
		<th>Actions</th>
	</tr>
	</thead>
	<tbody>

	@foreach (var player in _players)
	{
		<tr>
			<td>@player.Name</td>
			<td>@GetCharacterTypeDisplay(player.CharacterType)</td>
			<td>@player.DateCreated</td>
            <td>

                <button type="button"
                        class="btn btn-primary"
                        @onclick="args => Edit(player.Id)">
                    View
                </button>
            </td>
			<td>
			</td>
		</tr>
	}

	</tbody>

</table>

<!-- Pagination Controls -->
<div class="d-flex flex-column flex-md-row justify-content-between align-items-center mt-3">
    <div class="mb-2 mb-md-0">
        <button class="btn btn-sm btn-secondary" @onclick="PrevPage" disabled="@(_currentPage == 1)">Previous</button>
        @for (int i = 1; i <= _totalPages; i++)
        {
            var pageNumber = i;
            <button class="btn btn-sm @(pageNumber == _currentPage ? "btn-primary" : "btn-outline-primary") mx-1" @onclick="@(() => SetPage(pageNumber))">@pageNumber</button>
        }
        <button class="btn btn-sm btn-secondary" @onclick="NextPage" disabled="@(_currentPage == _totalPages)">Next</button>
    </div>
    <div>
        <input type="number" min="1" max="@_totalPages" style="width: 60px; display: inline-block;" @bind="_pageInput" @bind:event="oninput" placeholder="Page" />
        <button class="btn btn-sm btn-info" @onclick="JumpToPage">Go</button>
    </div>
    <span class="ms-2">Page @_currentPage of @_totalPages (@_totalRecords total records)</span>
</div>

@code {
	private List<Player> _players;
	protected string _searchText;
    protected long _totalRecords;

    // Pagination state
    private int _currentPage = 1;
    private const int PageSize = 20;
    private int _totalPages = 0;
    private string _pageInput = "";

	protected void RefreshList()
	{
		var query = new DBQuery<Player>();

	    _totalRecords = DB.SearchCount(query);

		if (!string.IsNullOrWhiteSpace(_searchText))
		{
			query.AddFieldSearch(nameof(Player.Name), _searchText, true);
		}

        // Calculate total pages
        _totalPages = (int)Math.Ceiling((double)_totalRecords / PageSize);
        
        // Ensure current page is within valid range
        if (_currentPage > _totalPages && _totalPages > 0)
        {
            _currentPage = _totalPages;
        }
        else if (_currentPage < 1)
        {
            _currentPage = 1;
        }

        // Add pagination to query
        var offset = (_currentPage - 1) * PageSize;
        query.AddPaging(PageSize, offset);

		_players = DB.Search(query).ToList();
	}

	protected override async Task OnInitializedAsync()
	{
		RefreshList();
	}

    protected void Edit(string id)
    {
        NavManager.NavigateTo($"ViewPlayer/{id}");
    }

    // Pagination methods
    private void NextPage()
    {
        if (_currentPage < _totalPages) 
        {
            _currentPage++;
            RefreshList();
        }
    }

    private void PrevPage()
    {
        if (_currentPage > 1) 
        {
            _currentPage--;
            RefreshList();
        }
    }

    private void SetPage(int page)
    {
        if (page >= 1 && page <= _totalPages) 
        {
            _currentPage = page;
            RefreshList();
        }
    }

    private void JumpToPage()
    {
        if (int.TryParse(_pageInput, out int page))
        {
            SetPage(page);
        }
        _pageInput = string.Empty;
    }

    private string GetCharacterTypeDisplay(SWLOR.Game.Server.Enumeration.CharacterType type)
    {
        var field = type.GetType().GetField(type.ToString());
        var attribute = field?.GetCustomAttribute<SWLOR.Game.Server.Enumeration.CharacterTypeAttribute>();
        return attribute?.Name ?? type.ToString();
    }
}
