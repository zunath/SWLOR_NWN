@page "/viewplayer/{PlayerId}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Policy = "DiscordAdmin")]
@using SWLOR.Game.Server.Service.CurrencyService
@using SWLOR.Game.Server.Enumeration
@using SWLOR.Game.Server.Service.SkillService
@using SWLOR.Game.Server.Service.PerkService
@using SWLOR.Admin.Services
@using System.Linq
@using System.Reflection
@using SWLOR.Game.Server.Extension
@using SWLOR.Admin.Shared.Components

@if (!PlayerExists())
{
    <div class="alert alert-danger">
        <h4>Player Not Found</h4>
        <p>Player ID @PlayerId was not found in the database.</p>
        <a href="/player" class="btn btn-primary">Back to Players</a>
    </div>
    return;
}

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <h2>Player Details: @ActivePlayer!.Name</h2>
            <p class="text-muted">ID: @PlayerId | Version: @ActivePlayer.Version</p>
        </div>
        <div class="col-auto">
            <a href="/player" class="btn btn-secondary">
                <i class="fas fa-arrow-left"></i> Back to Players
            </a>
        </div>
    </div>

    <!-- Debug Information -->
    @* Debug info and button removed as per request *@

    <!-- Status Badge -->
    <div class="row mb-3">
        <div class="col">
            @if (ActivePlayer.IsDeleted)
            {
                <span class="badge bg-danger">Deleted</span>
            }
            else
            {
                <span class="badge bg-success">Active</span>
            }
            <span class="badge bg-info">@ActivePlayer.CharacterType</span>
            @if (ActivePlayer.RebuildComplete)
            {
                <span class="badge bg-warning">Rebuild Complete</span>
            }
        </div>
    </div>

    <!-- Custom Tab Navigation -->
    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ActiveTab == "overview" ? "active" : "")" @onclick="@(() => SetActiveTab("overview"))" type="button">
                <i class="fas fa-info-circle"></i> Overview
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ActiveTab == "stats" ? "active" : "")" @onclick="@(() => SetActiveTab("stats"))" type="button">
                <i class="fas fa-heart"></i> Stats
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ActiveTab == "skills" ? "active" : "")" @onclick="@(() => SetActiveTab("skills"))" type="button">
                <i class="fas fa-graduation-cap"></i> Skills
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ActiveTab == "perks" ? "active" : "")" @onclick="@(() => SetActiveTab("perks"))" type="button">
                <i class="fas fa-star"></i> Perks
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ActiveTab == "location" ? "active" : "")" @onclick="@(() => SetActiveTab("location"))" type="button">
                <i class="fas fa-map-marker-alt"></i> Location & Travel
            </button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link @(ActiveTab == "advanced" ? "active" : "")" @onclick="@(() => SetActiveTab("advanced"))" type="button">
                <i class="fas fa-database"></i> Advanced Data
            </button>
        </li>
    </ul>

    <!-- Tab Content -->
    <div class="tab-content mt-3">
        @if (ActiveTab == "overview")
        {
            <!-- Overview Tab -->
            <PlayerOverview Player="@ActivePlayer" />
        }

        @if (ActiveTab == "stats")
        {
            <!-- Stats & Combat Tab -->
            <PlayerStats Player="@ActivePlayer" />
        }

        @if (ActiveTab == "skills")
        {
            <!-- Skills & Perks Tab -->
            <PlayerSkills Player="@ActivePlayer" />
        }

        @if (ActiveTab == "perks")
        {
            <!-- Perks Tab -->
            <PlayerPerks Player="@ActivePlayer" />
        }

        @if (ActiveTab == "location")
        {
            <!-- Location & Travel Tab -->
            <PlayerLocation Player="@ActivePlayer" />
        }

        @if (ActiveTab == "advanced")
        {
            <!-- Advanced Data Tab -->
            <PlayerAdvanced Player="@ActivePlayer" />
        }
    </div>
</div>

@code {
    [Parameter]
    public string? PlayerId { get; set; }

    protected Player? ActivePlayer;
    protected string ActiveTab = "overview";
    // ShowDebugInfo and related methods removed

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ActivePlayer = DB.Get<Player>(PlayerId);
    }

    protected bool PlayerExists()
    {
        return ActivePlayer != null;
    }

    protected void SetActiveTab(string tabName)
    {
        ActiveTab = tabName;
        StateHasChanged();
    }

    protected string GetRebuildStatus()
    {
        if (ActivePlayer == null) return "Unknown";
        
        if (ActivePlayer.RebuildComplete)
        {
            return "Rebuild Complete - Stats may have been reset";
        }
        
        return "No rebuild detected";
    }
}
