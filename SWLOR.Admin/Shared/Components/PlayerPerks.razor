@namespace SWLOR.Admin.Shared.Components
@using SWLOR.Game.Server.Service.PerkService
@using System.Linq

<!-- Perk Statistics Section (Moved to top) -->
<div class="row mb-3">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-chart-bar"></i> Perk Statistics</h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4">
                        <div class="text-center">
                            <h4 class="text-primary">@Player.Perks.Count</h4>
                            <p class="text-muted">Purchased Perks</p>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="text-center">
                            <h4 class="text-success">@Player.UnlockedPerks.Count</h4>
                            <p class="text-muted">Unlocked Perks</p>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="text-center">
                            <h4 class="text-info">@(Player.Perks.Values.Sum())</h4>
                            <p class="text-muted">Total Perk Levels</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-star"></i> Purchased Perks</h5>
            </div>
            <div class="card-body">
                @if (Player.Perks.Count > 0)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-sm">
                            <thead class="table-primary">
                                <tr>
                                    <th>Perk</th>
                                    <th>Level</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var perk in GetPaginatedPurchasedPerks())
                                {
                                    <tr>
                                        <td>@GetPerkDisplayName(perk.Key)</td>
                                        <td>@perk.Value</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Purchased Perks Pagination -->
                    @if (PurchasedPerksTotalPages > 1)
                    {
                        <nav aria-label="Purchased perks pagination">
                            <ul class="pagination pagination-sm justify-content-center">
                                <li class="page-item @(PurchasedPerksCurrentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => SetPurchasedPerksPage(PurchasedPerksCurrentPage - 1)">Previous</button>
                                </li>
                                @for (int i = 1; i <= PurchasedPerksTotalPages; i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(pageNumber == PurchasedPerksCurrentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => SetPurchasedPerksPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }
                                <li class="page-item @(PurchasedPerksCurrentPage == PurchasedPerksTotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => SetPurchasedPerksPage(PurchasedPerksCurrentPage + 1)">Next</button>
                                </li>
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <p class="text-muted">No perks purchased yet.</p>
                }
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5><i class="fas fa-unlock"></i> Unlocked Perks</h5>
            </div>
            <div class="card-body">
                @if (Player.UnlockedPerks.Count > 0)
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-sm">
                            <thead class="table-success">
                                <tr>
                                    <th>Perk</th>
                                    <th>Unlocked Date</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var perk in GetPaginatedUnlockedPerks())
                                {
                                    <tr>
                                        <td>@GetPerkDisplayName(perk.Key)</td>
                                        <td>@perk.Value.ToString("yyyy-MM-dd HH:mm")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Unlocked Perks Pagination -->
                    @if (UnlockedPerksTotalPages > 1)
                    {
                        <nav aria-label="Unlocked perks pagination">
                            <ul class="pagination pagination-sm justify-content-center">
                                <li class="page-item @(UnlockedPerksCurrentPage == 1 ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => SetUnlockedPerksPage(UnlockedPerksCurrentPage - 1)">Previous</button>
                                </li>
                                @for (int i = 1; i <= UnlockedPerksTotalPages; i++)
                                {
                                    var pageNumber = i;
                                    <li class="page-item @(pageNumber == UnlockedPerksCurrentPage ? "active" : "")">
                                        <button class="page-link" @onclick="() => SetUnlockedPerksPage(pageNumber)">@pageNumber</button>
                                    </li>
                                }
                                <li class="page-item @(UnlockedPerksCurrentPage == UnlockedPerksTotalPages ? "disabled" : "")">
                                    <button class="page-link" @onclick="() => SetUnlockedPerksPage(UnlockedPerksCurrentPage + 1)">Next</button>
                                </li>
                            </ul>
                        </nav>
                    }
                }
                else
                {
                    <p class="text-muted">No perks unlocked yet.</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Player Player { get; set; } = null!;

    // Pagination state for purchased perks
    private int PurchasedPerksCurrentPage = 1;
    private const int PurchasedPerksPageSize = 10;
    private int PurchasedPerksTotalPages => (int)Math.Ceiling((double)Player.Perks.Count / PurchasedPerksPageSize);

    // Pagination state for unlocked perks
    private int UnlockedPerksCurrentPage = 1;
    private const int UnlockedPerksPageSize = 10;
    private int UnlockedPerksTotalPages => (int)Math.Ceiling((double)Player.UnlockedPerks.Count / UnlockedPerksPageSize);

    protected string GetPerkDisplayName(PerkType perkType)
    {
        // For now, return the enum name as a formatted string
        // This can be enhanced later with proper perk attributes if they exist
        var name = perkType.ToString();
        
        // Convert from PascalCase to Title Case with spaces
        var result = System.Text.RegularExpressions.Regex.Replace(name, "([a-z])([A-Z])", "$1 $2");
        return result;
    }

    private IEnumerable<KeyValuePair<PerkType, int>> GetPaginatedPurchasedPerks()
    {
        return Player.Perks
            .Skip((PurchasedPerksCurrentPage - 1) * PurchasedPerksPageSize)
            .Take(PurchasedPerksPageSize);
    }

    private IEnumerable<KeyValuePair<PerkType, DateTime>> GetPaginatedUnlockedPerks()
    {
        return Player.UnlockedPerks
            .Skip((UnlockedPerksCurrentPage - 1) * UnlockedPerksPageSize)
            .Take(UnlockedPerksPageSize);
    }

    private void SetPurchasedPerksPage(int page)
    {
        if (page >= 1 && page <= PurchasedPerksTotalPages)
        {
            PurchasedPerksCurrentPage = page;
            StateHasChanged();
        }
    }

    private void SetUnlockedPerksPage(int page)
    {
        if (page >= 1 && page <= UnlockedPerksTotalPages)
        {
            UnlockedPerksCurrentPage = page;
            StateHasChanged();
        }
    }
} 