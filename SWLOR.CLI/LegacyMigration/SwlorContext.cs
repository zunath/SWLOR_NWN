// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using MySqlConnector;

namespace SWLOR.CLI.LegacyMigration
{
    public partial class SwlorContext : DbContext
    {
        public SwlorContext()
        {
        }

        public SwlorContext(DbContextOptions<SwlorContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Apartmentbuilding> Apartmentbuilding { get; set; }
        public virtual DbSet<Area> Area { get; set; }
        public virtual DbSet<Association> Association { get; set; }
        public virtual DbSet<Attribute> Attribute { get; set; }
        public virtual DbSet<Authorizeddm> Authorizeddm { get; set; }
        public virtual DbSet<Backgrounds> Backgrounds { get; set; }
        public virtual DbSet<Bank> Bank { get; set; }
        public virtual DbSet<Bankitem> Bankitem { get; set; }
        public virtual DbSet<Baseitemtype> Baseitemtype { get; set; }
        public virtual DbSet<Pcguildpoint> Pcguildpoint { get; set; }
        public virtual DbSet<Pckeyitem> Pckeyitem { get; set; }
        public virtual DbSet<Pcmappin> Pcmappin { get; set; }
        public virtual DbSet<Pcmapprogression> Pcmapprogression { get; set; }
        public virtual DbSet<Pcobjectvisibility> Pcobjectvisibility { get; set; }
        public virtual DbSet<Pcquestitemprogress> Pcquestitemprogress { get; set; }
        public virtual DbSet<Pcquestkilltargetprogress> Pcquestkilltargetprogress { get; set; }
        public virtual DbSet<Pcqueststatus> Pcqueststatus { get; set; }
        public virtual DbSet<Pcskill> Pcskill { get; set; }
        public virtual DbSet<Player> Player { get; set; }
        public virtual DbSet<Serverconfiguration> Serverconfiguration { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            var connectionString = ConfigurationManager.ConnectionStrings["SwlorContext"].ConnectionString;
            optionsBuilder.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString));
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.UseCollation("utf8mb4_0900_ai_ci")
                .HasCharSet("utf8mb4");

            modelBuilder.Entity<Apartmentbuilding>(entity =>
            {
                entity.ToTable("apartmentbuilding");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(64);
            });

            modelBuilder.Entity<Area>(entity =>
            {
                entity.ToTable("area");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_Area_ID")
                    .IsUnique();

                entity.HasIndex(e => e.NortheastLootTableId, "FK_Area_NortheastLootTableID");

                entity.HasIndex(e => e.NortheastOwner, "FK_Area_NortheastOwner");

                entity.HasIndex(e => e.NorthwestLootTableId, "FK_Area_NorthwestLootTableID");

                entity.HasIndex(e => e.NorthwestOwner, "FK_Area_NorthwestOwner");

                entity.HasIndex(e => e.ResourceSpawnTableId, "FK_Area_ResourceSpawnTableID");

                entity.HasIndex(e => e.SoutheastLootTableId, "FK_Area_SoutheastLootTableID");

                entity.HasIndex(e => e.SoutheastOwner, "FK_Area_SoutheastOwner");

                entity.HasIndex(e => e.SouthwestLootTableId, "FK_Area_SouthwestLootTableID");

                entity.HasIndex(e => e.SouthwestOwner, "FK_Area_SouthwestOwner");

                entity.HasIndex(e => e.Resref, "UQ_Area_Resref")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(128);

                entity.Property(e => e.NortheastLootTableId).HasColumnName("NortheastLootTableID");

                entity.Property(e => e.NortheastOwner).HasMaxLength(64);

                entity.Property(e => e.NorthwestLootTableId).HasColumnName("NorthwestLootTableID");

                entity.Property(e => e.NorthwestOwner).HasMaxLength(64);

                entity.Property(e => e.ResourceSpawnTableId).HasColumnName("ResourceSpawnTableID");

                entity.Property(e => e.Resref)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.SoutheastLootTableId).HasColumnName("SoutheastLootTableID");

                entity.Property(e => e.SoutheastOwner).HasMaxLength(64);

                entity.Property(e => e.SouthwestLootTableId).HasColumnName("SouthwestLootTableID");

                entity.Property(e => e.SouthwestOwner).HasMaxLength(64);

                entity.Property(e => e.Tag)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.HasOne(d => d.NortheastOwnerNavigation)
                    .WithMany(p => p.AreaNortheastOwnerNavigation)
                    .HasForeignKey(d => d.NortheastOwner)
                    .HasConstraintName("FK_Area_NortheastOwner");

                entity.HasOne(d => d.NorthwestOwnerNavigation)
                    .WithMany(p => p.AreaNorthwestOwnerNavigation)
                    .HasForeignKey(d => d.NorthwestOwner)
                    .HasConstraintName("FK_Area_NorthwestOwner");

                entity.HasOne(d => d.SoutheastOwnerNavigation)
                    .WithMany(p => p.AreaSoutheastOwnerNavigation)
                    .HasForeignKey(d => d.SoutheastOwner)
                    .HasConstraintName("FK_Area_SoutheastOwner");

                entity.HasOne(d => d.SouthwestOwnerNavigation)
                    .WithMany(p => p.AreaSouthwestOwnerNavigation)
                    .HasForeignKey(d => d.SouthwestOwner)
                    .HasConstraintName("FK_Area_SouthwestOwner");
            });

            modelBuilder.Entity<Association>(entity =>
            {
                entity.ToTable("association");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(32);
            });

            modelBuilder.Entity<Attribute>(entity =>
            {
                entity.ToTable("attribute");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(3)
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Nwnvalue).HasColumnName("NWNValue");
            });

            modelBuilder.Entity<Authorizeddm>(entity =>
            {
                entity.ToTable("authorizeddm");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Cdkey)
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnName("CDKey");

                entity.Property(e => e.Dmrole).HasColumnName("DMRole");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(255);
            });

            modelBuilder.Entity<Backgrounds>(entity =>
            {
                entity.ToTable("backgrounds");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_Backgrounds_ID")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.Bonuses)
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasDefaultValueSql("''");

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.Description)
                    .IsRequired()
                    .HasMaxLength(512)
                    .HasDefaultValueSql("''");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasDefaultValueSql("''");
            });

            modelBuilder.Entity<Bank>(entity =>
            {
                entity.ToTable("bank");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.AreaName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.AreaResref)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.AreaTag)
                    .IsRequired()
                    .HasMaxLength(64);
            });

            modelBuilder.Entity<Bankitem>(entity =>
            {
                entity.ToTable("bankitem");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_BankItem_ID")
                    .IsUnique();

                entity.HasIndex(e => e.BankId, "FK_BankItem_BankID");

                entity.HasIndex(e => new { e.PlayerId, e.BankId, e.DateStored, e.ItemId, e.ItemName, e.ItemObject, e.ItemResref, e.ItemTag }, "IX_BankItem_PlayerID")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0, 255, 255, 0, 0 });

                entity.HasIndex(e => e.ItemId, "UQ_BankItem_ItemID")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.BankId).HasColumnName("BankID");

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.DateStored).HasMaxLength(6);

                entity.Property(e => e.ItemId)
                    .IsRequired()
                    .HasMaxLength(60)
                    .HasColumnName("ItemID");

                entity.Property(e => e.ItemName)
                    .IsRequired()
                    .HasColumnType("longtext");

                entity.Property(e => e.ItemObject)
                    .IsRequired()
                    .HasColumnType("longtext");

                entity.Property(e => e.ItemResref)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.ItemTag)
                    .IsRequired()
                    .HasMaxLength(64);

                entity.Property(e => e.PlayerId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PlayerID");

                entity.HasOne(d => d.Bank)
                    .WithMany(p => p.Bankitem)
                    .HasForeignKey(d => d.BankId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankItem_BankID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Bankitem)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_BankItem_PlayerID");
            });

            modelBuilder.Entity<Baseitemtype>(entity =>
            {
                entity.ToTable("baseitemtype");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(64);
            });

            modelBuilder.Entity<Pcguildpoint>(entity =>
            {
                entity.ToTable("pcguildpoint");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.GuildId, "FK_PCGuildPoint_GuildID");

                entity.HasIndex(e => new { e.PlayerId, e.GuildId }, "UQ_PCGuildPoint_PlayerIDGuildID")
                    .IsUnique();

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.GuildId).HasColumnName("GuildID");

                entity.Property(e => e.PlayerId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PlayerID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Pcguildpoint)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCGuildPoint_PlayerID");
            });

            modelBuilder.Entity<Pckeyitem>(entity =>
            {
                entity.ToTable("pckeyitem");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_PCKeyItem_ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerId, e.AcquiredDate, e.KeyItemId }, "IX_PCKeyItem_PlayerID");

                entity.HasIndex(e => e.KeyItemId, "fk_PCKeyItem_KeyItemID");

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.AcquiredDate).HasMaxLength(6);

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.KeyItemId).HasColumnName("KeyItemID");

                entity.Property(e => e.PlayerId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PlayerID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Pckeyitem)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("fk_PCKeyItem_PlayerID");
            });

            modelBuilder.Entity<Pcmappin>(entity =>
            {
                entity.ToTable("pcmappin");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_PCMapPin_ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerId, e.AreaTag, e.NoteText, e.PositionX, e.PositionY }, "IX_PCMapPin_PlayerID")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 255, 0, 0 });

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.AreaTag)
                    .IsRequired()
                    .HasMaxLength(32);

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.NoteText)
                    .IsRequired()
                    .HasMaxLength(1024);

                entity.Property(e => e.PlayerId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PlayerID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Pcmappin)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCMapPin_PlayerID");
            });

            modelBuilder.Entity<Pcmapprogression>(entity =>
            {
                entity.ToTable("pcmapprogression");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_PCMapProgression_ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerId, e.AreaResref, e.Progression }, "IX_PCMapProgression_PlayerID")
                    .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 255 });

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.AreaResref)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.PlayerId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PlayerID");

                entity.Property(e => e.Progression)
                    .IsRequired()
                    .HasMaxLength(1024);

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Pcmapprogression)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCMapProgression_PlayerID");
            });

            modelBuilder.Entity<Pcobjectvisibility>(entity =>
            {
                entity.ToTable("pcobjectvisibility");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_PCObjectVisibility_ID")
                    .IsUnique();

                entity.HasIndex(e => new { e.PlayerId, e.IsVisible, e.VisibilityObjectId }, "IX_PCObjectVisibility_PlayerID");

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.PlayerId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PlayerID");

                entity.Property(e => e.VisibilityObjectId)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasColumnName("VisibilityObjectID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Pcobjectvisibility)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCObjectVisibility_PlayerID");
            });

            modelBuilder.Entity<Pcquestitemprogress>(entity =>
            {
                entity.ToTable("pcquestitemprogress");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_PCQuestItemProgress_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PcquestStatusId, "FK_PCQuestItemProgress_PCQuesttatusID");

                entity.HasIndex(e => new { e.PlayerId, e.MustBeCraftedByPlayer, e.PcquestStatusId, e.Remaining, e.Resref }, "IX_PCQuestItemProgress_PlayerID");

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.PcquestStatusId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PCQuestStatusID");

                entity.Property(e => e.PlayerId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PlayerID");

                entity.Property(e => e.Resref)
                    .IsRequired()
                    .HasMaxLength(16);

                entity.HasOne(d => d.PcquestStatus)
                    .WithMany(p => p.Pcquestitemprogress)
                    .HasForeignKey(d => d.PcquestStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCQuestItemProgress_PCQuesttatusID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Pcquestitemprogress)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCQuestItemProgress_PlayerID");
            });

            modelBuilder.Entity<Pcquestkilltargetprogress>(entity =>
            {
                entity.ToTable("pcquestkilltargetprogress");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_PCQuestKillTargetProgress_ID")
                    .IsUnique();

                entity.HasIndex(e => e.NpcgroupId, "FK_PCQuestKillTargetProgress_NPCGroupID");

                entity.HasIndex(e => e.PcquestStatusId, "FK_PCQuestKillTargetProgress_PCQuesttatusID");

                entity.HasIndex(e => new { e.PlayerId, e.NpcgroupId, e.PcquestStatusId, e.RemainingToKill }, "IX_PCQuestKillTargetProgress_PlayerID");

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.NpcgroupId).HasColumnName("NPCGroupID");

                entity.Property(e => e.PcquestStatusId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PCQuestStatusID");

                entity.Property(e => e.PlayerId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PlayerID");

                entity.HasOne(d => d.PcquestStatus)
                    .WithMany(p => p.Pcquestkilltargetprogress)
                    .HasForeignKey(d => d.PcquestStatusId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCQuestKillTargetProgress_PCQuesttatusID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Pcquestkilltargetprogress)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCQuestKillTargetProgress_PlayerID");
            });

            modelBuilder.Entity<Pcqueststatus>(entity =>
            {
                entity.ToTable("pcqueststatus");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_PCQuestStatus_ID")
                    .IsUnique();

                entity.HasIndex(e => e.PlayerId, "FK_PCQuesttatus_PlayerID");

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.CompletionDate).HasMaxLength(6);

                entity.Property(e => e.PlayerId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PlayerID");

                entity.Property(e => e.QuestId).HasColumnName("QuestID");

                entity.Property(e => e.SelectedItemRewardId).HasColumnName("SelectedItemRewardID");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Pcqueststatus)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCQuesttatus_PlayerID");
            });

            modelBuilder.Entity<Pcskill>(entity =>
            {
                entity.ToTable("pcskill");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_PCSkill_ID")
                    .IsUnique();

                entity.HasIndex(e => e.SkillId, "FK_PCSkill_SkillID");

                entity.HasIndex(e => new { e.PlayerId, e.IsLocked, e.Rank, e.SkillId, e.Xp }, "IX_PCSkill_PlayerID");

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.PlayerId)
                    .IsRequired()
                    .HasMaxLength(64)
                    .HasColumnName("PlayerID");

                entity.Property(e => e.SkillId).HasColumnName("SkillID");

                entity.Property(e => e.Xp).HasColumnName("XP");

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.Pcskill)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_PCSkill_PlayerID");
            });

            modelBuilder.Entity<Player>(entity =>
            {
                entity.ToTable("player");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.HasIndex(e => e.ClusterId, "CIX_Player_ID")
                    .IsUnique();

                entity.HasIndex(e => e.ActiveConcentrationPerkId, "FK_Player_ActiveConcentrationPerkID");

                entity.HasIndex(e => e.AssociationId, "FK_Player_AssociationID");

                entity.HasIndex(e => e.PrimaryResidencePcbaseId, "FK_Player_PrimaryResidencePCBaseID");

                entity.HasIndex(e => e.PrimaryResidencePcbaseStructureId, "FK_Player_PrimaryResidencePCBaseStructureID");

                entity.HasIndex(e => e.SpecializationId, "FK_Player_SpecializationID");

                entity.Property(e => e.Id)
                    .HasMaxLength(64)
                    .HasColumnName("ID");

                entity.Property(e => e.ActiveConcentrationPerkId).HasColumnName("ActiveConcentrationPerkID");

                entity.Property(e => e.AssociationId).HasColumnName("AssociationID");

                entity.Property(e => e.Chabase).HasColumnName("CHABase");

                entity.Property(e => e.ClusterId)
                    .ValueGeneratedOnAdd()
                    .HasColumnName("ClusterID");

                entity.Property(e => e.Conbase).HasColumnName("CONBase");

                entity.Property(e => e.CreateTimestamp).HasMaxLength(6);

                entity.Property(e => e.CurrentFp).HasColumnName("CurrentFP");

                entity.Property(e => e.CurrentFptick).HasColumnName("CurrentFPTick");

                entity.Property(e => e.DatePerkRefundAvailable).HasMaxLength(6);

                entity.Property(e => e.DateSanctuaryEnds).HasMaxLength(6);

                entity.Property(e => e.Dexbase).HasColumnName("DEXBase");

                entity.Property(e => e.DisplayDiscord)
                    .IsRequired()
                    .HasDefaultValueSql("'1'");

                entity.Property(e => e.DisplayHelmet)
                    .IsRequired()
                    .HasDefaultValueSql("'1'");

                entity.Property(e => e.DisplayHolonet)
                    .IsRequired()
                    .HasDefaultValueSql("'1'");

                entity.Property(e => e.HpregenerationAmount).HasColumnName("HPRegenerationAmount");

                entity.Property(e => e.Intbase).HasColumnName("INTBase");

                entity.Property(e => e.LocationAreaResref).HasMaxLength(16);

                entity.Property(e => e.LocationInstanceId)
                    .HasMaxLength(64)
                    .HasColumnName("LocationInstanceID");

                entity.Property(e => e.MaxFp).HasColumnName("MaxFP");

                entity.Property(e => e.PrimaryResidencePcbaseId)
                    .HasMaxLength(64)
                    .HasColumnName("PrimaryResidencePCBaseID");

                entity.Property(e => e.PrimaryResidencePcbaseStructureId)
                    .HasMaxLength(64)
                    .HasColumnName("PrimaryResidencePCBaseStructureID");

                entity.Property(e => e.RespawnAreaResref)
                    .HasMaxLength(16)
                    .HasDefaultValueSql("''");

                entity.Property(e => e.RoleplayXp).HasColumnName("RoleplayXP");

                entity.Property(e => e.SpecializationId).HasColumnName("SpecializationID");

                entity.Property(e => e.Strbase).HasColumnName("STRBase");

                entity.Property(e => e.TotalSpacquired).HasColumnName("TotalSPAcquired");

                entity.Property(e => e.UnallocatedSp).HasColumnName("UnallocatedSP");

                entity.Property(e => e.Wisbase).HasColumnName("WISBase");

                entity.Property(e => e.Xpbonus).HasColumnName("XPBonus");

                entity.HasOne(d => d.Association)
                    .WithMany(p => p.Player)
                    .HasForeignKey(d => d.AssociationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Player_AssociationID");
            });

            modelBuilder.Entity<Serverconfiguration>(entity =>
            {
                entity.ToTable("serverconfiguration");

                entity.HasCharSet("utf8mb3")
                    .UseCollation("utf8_general_ci");

                entity.Property(e => e.Id)
                    .ValueGeneratedNever()
                    .HasColumnName("ID");

                entity.Property(e => e.LastGuildTaskUpdate)
                    .HasMaxLength(6)
                    .HasDefaultValueSql("'1900-01-01 00:00:00.000000'");

                entity.Property(e => e.MessageOfTheDay)
                    .IsRequired()
                    .HasMaxLength(1024)
                    .HasDefaultValueSql("''");

                entity.Property(e => e.ServerName)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasDefaultValueSql("''");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}